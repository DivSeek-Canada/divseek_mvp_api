# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class QTL(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, qtl_id: int=None, locus_name: str=None, trait_id: int=None, locus_id: int=None):  # noqa: E501
        """QTL - a model defined in Swagger

        :param qtl_id: The qtl_id of this QTL.  # noqa: E501
        :type qtl_id: int
        :param locus_name: The locus_name of this QTL.  # noqa: E501
        :type locus_name: str
        :param trait_id: The trait_id of this QTL.  # noqa: E501
        :type trait_id: int
        :param locus_id: The locus_id of this QTL.  # noqa: E501
        :type locus_id: int
        """
        self.swagger_types = {
            'qtl_id': int,
            'locus_name': str,
            'trait_id': int,
            'locus_id': int
        }

        self.attribute_map = {
            'qtl_id': 'qtl_id',
            'locus_name': 'locus_name',
            'trait_id': 'trait_id',
            'locus_id': 'locus_id'
        }

        self._qtl_id = qtl_id
        self._locus_name = locus_name
        self._trait_id = trait_id
        self._locus_id = locus_id

    @classmethod
    def from_dict(cls, dikt) -> 'QTL':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The QTL of this QTL.  # noqa: E501
        :rtype: QTL
        """
        return util.deserialize_model(dikt, cls)

    @property
    def qtl_id(self) -> int:
        """Gets the qtl_id of this QTL.


        :return: The qtl_id of this QTL.
        :rtype: int
        """
        return self._qtl_id

    @qtl_id.setter
    def qtl_id(self, qtl_id: int):
        """Sets the qtl_id of this QTL.


        :param qtl_id: The qtl_id of this QTL.
        :type qtl_id: int
        """
        if qtl_id is None:
            raise ValueError("Invalid value for `qtl_id`, must not be `None`")  # noqa: E501

        self._qtl_id = qtl_id

    @property
    def locus_name(self) -> str:
        """Gets the locus_name of this QTL.


        :return: The locus_name of this QTL.
        :rtype: str
        """
        return self._locus_name

    @locus_name.setter
    def locus_name(self, locus_name: str):
        """Sets the locus_name of this QTL.


        :param locus_name: The locus_name of this QTL.
        :type locus_name: str
        """

        self._locus_name = locus_name

    @property
    def trait_id(self) -> int:
        """Gets the trait_id of this QTL.


        :return: The trait_id of this QTL.
        :rtype: int
        """
        return self._trait_id

    @trait_id.setter
    def trait_id(self, trait_id: int):
        """Sets the trait_id of this QTL.


        :param trait_id: The trait_id of this QTL.
        :type trait_id: int
        """
        if trait_id is None:
            raise ValueError("Invalid value for `trait_id`, must not be `None`")  # noqa: E501

        self._trait_id = trait_id

    @property
    def locus_id(self) -> int:
        """Gets the locus_id of this QTL.


        :return: The locus_id of this QTL.
        :rtype: int
        """
        return self._locus_id

    @locus_id.setter
    def locus_id(self, locus_id: int):
        """Sets the locus_id of this QTL.


        :param locus_id: The locus_id of this QTL.
        :type locus_id: int
        """
        if locus_id is None:
            raise ValueError("Invalid value for `locus_id`, must not be `None`")  # noqa: E501

        self._locus_id = locus_id
