# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Locus(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, locus_id: int=None, locus_name: str=None, basepair_start: int=None, basepair_end: int=None, taxonomy_id: int=None):  # noqa: E501
        """Locus - a model defined in Swagger

        :param locus_id: The locus_id of this Locus.  # noqa: E501
        :type locus_id: int
        :param locus_name: The locus_name of this Locus.  # noqa: E501
        :type locus_name: str
        :param basepair_start: The basepair_start of this Locus.  # noqa: E501
        :type basepair_start: int
        :param basepair_end: The basepair_end of this Locus.  # noqa: E501
        :type basepair_end: int
        :param taxonomy_id: The taxonomy_id of this Locus.  # noqa: E501
        :type taxonomy_id: int
        """
        self.swagger_types = {
            'locus_id': int,
            'locus_name': str,
            'basepair_start': int,
            'basepair_end': int,
            'taxonomy_id': int
        }

        self.attribute_map = {
            'locus_id': 'locus_id',
            'locus_name': 'locus_name',
            'basepair_start': 'basepair_start',
            'basepair_end': 'basepair_end',
            'taxonomy_id': 'taxonomy_id'
        }

        self._locus_id = locus_id
        self._locus_name = locus_name
        self._basepair_start = basepair_start
        self._basepair_end = basepair_end
        self._taxonomy_id = taxonomy_id

    @classmethod
    def from_dict(cls, dikt) -> 'Locus':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Locus of this Locus.  # noqa: E501
        :rtype: Locus
        """
        return util.deserialize_model(dikt, cls)

    @property
    def locus_id(self) -> int:
        """Gets the locus_id of this Locus.


        :return: The locus_id of this Locus.
        :rtype: int
        """
        return self._locus_id

    @locus_id.setter
    def locus_id(self, locus_id: int):
        """Sets the locus_id of this Locus.


        :param locus_id: The locus_id of this Locus.
        :type locus_id: int
        """
        if locus_id is None:
            raise ValueError("Invalid value for `locus_id`, must not be `None`")  # noqa: E501

        self._locus_id = locus_id

    @property
    def locus_name(self) -> str:
        """Gets the locus_name of this Locus.


        :return: The locus_name of this Locus.
        :rtype: str
        """
        return self._locus_name

    @locus_name.setter
    def locus_name(self, locus_name: str):
        """Sets the locus_name of this Locus.


        :param locus_name: The locus_name of this Locus.
        :type locus_name: str
        """

        self._locus_name = locus_name

    @property
    def basepair_start(self) -> int:
        """Gets the basepair_start of this Locus.


        :return: The basepair_start of this Locus.
        :rtype: int
        """
        return self._basepair_start

    @basepair_start.setter
    def basepair_start(self, basepair_start: int):
        """Sets the basepair_start of this Locus.


        :param basepair_start: The basepair_start of this Locus.
        :type basepair_start: int
        """
        if basepair_start is None:
            raise ValueError("Invalid value for `basepair_start`, must not be `None`")  # noqa: E501

        self._basepair_start = basepair_start

    @property
    def basepair_end(self) -> int:
        """Gets the basepair_end of this Locus.


        :return: The basepair_end of this Locus.
        :rtype: int
        """
        return self._basepair_end

    @basepair_end.setter
    def basepair_end(self, basepair_end: int):
        """Sets the basepair_end of this Locus.


        :param basepair_end: The basepair_end of this Locus.
        :type basepair_end: int
        """
        if basepair_end is None:
            raise ValueError("Invalid value for `basepair_end`, must not be `None`")  # noqa: E501

        self._basepair_end = basepair_end

    @property
    def taxonomy_id(self) -> int:
        """Gets the taxonomy_id of this Locus.


        :return: The taxonomy_id of this Locus.
        :rtype: int
        """
        return self._taxonomy_id

    @taxonomy_id.setter
    def taxonomy_id(self, taxonomy_id: int):
        """Sets the taxonomy_id of this Locus.


        :param taxonomy_id: The taxonomy_id of this Locus.
        :type taxonomy_id: int
        """

        self._taxonomy_id = taxonomy_id
