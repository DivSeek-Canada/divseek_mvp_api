# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Taxonomy(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, taxonomy_id: int=None, genus: str=None, species: str=None):  # noqa: E501
        """Taxonomy - a model defined in Swagger

        :param taxonomy_id: The taxonomy_id of this Taxonomy.  # noqa: E501
        :type taxonomy_id: int
        :param genus: The genus of this Taxonomy.  # noqa: E501
        :type genus: str
        :param species: The species of this Taxonomy.  # noqa: E501
        :type species: str
        """
        self.swagger_types = {
            'taxonomy_id': int,
            'genus': str,
            'species': str
        }

        self.attribute_map = {
            'taxonomy_id': 'taxonomy_id',
            'genus': 'genus',
            'species': 'species'
        }

        self._taxonomy_id = taxonomy_id
        self._genus = genus
        self._species = species

    @classmethod
    def from_dict(cls, dikt) -> 'Taxonomy':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Taxonomy of this Taxonomy.  # noqa: E501
        :rtype: Taxonomy
        """
        return util.deserialize_model(dikt, cls)

    @property
    def taxonomy_id(self) -> int:
        """Gets the taxonomy_id of this Taxonomy.


        :return: The taxonomy_id of this Taxonomy.
        :rtype: int
        """
        return self._taxonomy_id

    @taxonomy_id.setter
    def taxonomy_id(self, taxonomy_id: int):
        """Sets the taxonomy_id of this Taxonomy.


        :param taxonomy_id: The taxonomy_id of this Taxonomy.
        :type taxonomy_id: int
        """
        if taxonomy_id is None:
            raise ValueError("Invalid value for `taxonomy_id`, must not be `None`")  # noqa: E501

        self._taxonomy_id = taxonomy_id

    @property
    def genus(self) -> str:
        """Gets the genus of this Taxonomy.


        :return: The genus of this Taxonomy.
        :rtype: str
        """
        return self._genus

    @genus.setter
    def genus(self, genus: str):
        """Sets the genus of this Taxonomy.


        :param genus: The genus of this Taxonomy.
        :type genus: str
        """

        self._genus = genus

    @property
    def species(self) -> str:
        """Gets the species of this Taxonomy.


        :return: The species of this Taxonomy.
        :rtype: str
        """
        return self._species

    @species.setter
    def species(self, species: str):
        """Sets the species of this Taxonomy.


        :param species: The species of this Taxonomy.
        :type species: str
        """

        self._species = species
