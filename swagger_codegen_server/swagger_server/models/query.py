# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Query(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, trait_id: int=None, germplasm_id: int=None):  # noqa: E501
        """Query - a model defined in Swagger

        :param id: The id of this Query.  # noqa: E501
        :type id: int
        :param trait_id: The trait_id of this Query.  # noqa: E501
        :type trait_id: int
        :param germplasm_id: The germplasm_id of this Query.  # noqa: E501
        :type germplasm_id: int
        """
        self.swagger_types = {
            'id': int,
            'trait_id': int,
            'germplasm_id': int
        }

        self.attribute_map = {
            'id': 'id',
            'trait_id': 'traitID',
            'germplasm_id': 'germplasmID'
        }

        self._id = id
        self._trait_id = trait_id
        self._germplasm_id = germplasm_id

    @classmethod
    def from_dict(cls, dikt) -> 'Query':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Query of this Query.  # noqa: E501
        :rtype: Query
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this Query.


        :return: The id of this Query.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Query.


        :param id: The id of this Query.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def trait_id(self) -> int:
        """Gets the trait_id of this Query.


        :return: The trait_id of this Query.
        :rtype: int
        """
        return self._trait_id

    @trait_id.setter
    def trait_id(self, trait_id: int):
        """Sets the trait_id of this Query.


        :param trait_id: The trait_id of this Query.
        :type trait_id: int
        """
        if trait_id is None:
            raise ValueError("Invalid value for `trait_id`, must not be `None`")  # noqa: E501

        self._trait_id = trait_id

    @property
    def germplasm_id(self) -> int:
        """Gets the germplasm_id of this Query.


        :return: The germplasm_id of this Query.
        :rtype: int
        """
        return self._germplasm_id

    @germplasm_id.setter
    def germplasm_id(self, germplasm_id: int):
        """Sets the germplasm_id of this Query.


        :param germplasm_id: The germplasm_id of this Query.
        :type germplasm_id: int
        """
        if germplasm_id is None:
            raise ValueError("Invalid value for `germplasm_id`, must not be `None`")  # noqa: E501

        self._germplasm_id = germplasm_id
