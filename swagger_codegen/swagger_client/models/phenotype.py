# coding: utf-8

"""
    Divseek Canada MVP application API

    Implements all the calls necessary for finding genomic markers for germplasm, but doesn't conform to BrAPI.  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: apiteam@swagger.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Phenotype(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'trait_id': 'int',
        'trait_name': 'str',
        'trait_type': 'str',
        'trait_description': 'str'
    }

    attribute_map = {
        'trait_id': 'trait_id',
        'trait_name': 'trait_name',
        'trait_type': 'trait_type',
        'trait_description': 'trait_description'
    }

    def __init__(self, trait_id=None, trait_name=None, trait_type=None, trait_description=None):  # noqa: E501
        """Phenotype - a model defined in Swagger"""  # noqa: E501

        self._trait_id = None
        self._trait_name = None
        self._trait_type = None
        self._trait_description = None
        self.discriminator = None

        if trait_id is not None:
            self.trait_id = trait_id
        if trait_name is not None:
            self.trait_name = trait_name
        if trait_type is not None:
            self.trait_type = trait_type
        if trait_description is not None:
            self.trait_description = trait_description

    @property
    def trait_id(self):
        """Gets the trait_id of this Phenotype.  # noqa: E501


        :return: The trait_id of this Phenotype.  # noqa: E501
        :rtype: int
        """
        return self._trait_id

    @trait_id.setter
    def trait_id(self, trait_id):
        """Sets the trait_id of this Phenotype.


        :param trait_id: The trait_id of this Phenotype.  # noqa: E501
        :type: int
        """

        self._trait_id = trait_id

    @property
    def trait_name(self):
        """Gets the trait_name of this Phenotype.  # noqa: E501


        :return: The trait_name of this Phenotype.  # noqa: E501
        :rtype: str
        """
        return self._trait_name

    @trait_name.setter
    def trait_name(self, trait_name):
        """Sets the trait_name of this Phenotype.


        :param trait_name: The trait_name of this Phenotype.  # noqa: E501
        :type: str
        """

        self._trait_name = trait_name

    @property
    def trait_type(self):
        """Gets the trait_type of this Phenotype.  # noqa: E501


        :return: The trait_type of this Phenotype.  # noqa: E501
        :rtype: str
        """
        return self._trait_type

    @trait_type.setter
    def trait_type(self, trait_type):
        """Sets the trait_type of this Phenotype.


        :param trait_type: The trait_type of this Phenotype.  # noqa: E501
        :type: str
        """

        self._trait_type = trait_type

    @property
    def trait_description(self):
        """Gets the trait_description of this Phenotype.  # noqa: E501


        :return: The trait_description of this Phenotype.  # noqa: E501
        :rtype: str
        """
        return self._trait_description

    @trait_description.setter
    def trait_description(self, trait_description):
        """Sets the trait_description of this Phenotype.


        :param trait_description: The trait_description of this Phenotype.  # noqa: E501
        :type: str
        """

        self._trait_description = trait_description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Phenotype):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
