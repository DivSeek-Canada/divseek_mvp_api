# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Germplasm(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, name: str=None, general_identifier: str=None, taxonomy_id: int=None):  # noqa: E501
        """Germplasm - a model defined in Swagger

        :param id: The id of this Germplasm.  # noqa: E501
        :type id: int
        :param name: The name of this Germplasm.  # noqa: E501
        :type name: str
        :param general_identifier: The general_identifier of this Germplasm.  # noqa: E501
        :type general_identifier: str
        :param taxonomy_id: The taxonomy_id of this Germplasm.  # noqa: E501
        :type taxonomy_id: int
        """
        self.swagger_types = {
            'id': int,
            'name': str,
            'general_identifier': str,
            'taxonomy_id': int
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'general_identifier': 'general_identifier',
            'taxonomy_id': 'taxonomy_id'
        }

        self._id = id
        self._name = name
        self._general_identifier = general_identifier
        self._taxonomy_id = taxonomy_id

    @classmethod
    def from_dict(cls, dikt) -> 'Germplasm':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Germplasm of this Germplasm.  # noqa: E501
        :rtype: Germplasm
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this Germplasm.


        :return: The id of this Germplasm.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Germplasm.


        :param id: The id of this Germplasm.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self) -> str:
        """Gets the name of this Germplasm.


        :return: The name of this Germplasm.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Germplasm.


        :param name: The name of this Germplasm.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def general_identifier(self) -> str:
        """Gets the general_identifier of this Germplasm.


        :return: The general_identifier of this Germplasm.
        :rtype: str
        """
        return self._general_identifier

    @general_identifier.setter
    def general_identifier(self, general_identifier: str):
        """Sets the general_identifier of this Germplasm.


        :param general_identifier: The general_identifier of this Germplasm.
        :type general_identifier: str
        """
        if general_identifier is None:
            raise ValueError("Invalid value for `general_identifier`, must not be `None`")  # noqa: E501

        self._general_identifier = general_identifier

    @property
    def taxonomy_id(self) -> int:
        """Gets the taxonomy_id of this Germplasm.


        :return: The taxonomy_id of this Germplasm.
        :rtype: int
        """
        return self._taxonomy_id

    @taxonomy_id.setter
    def taxonomy_id(self, taxonomy_id: int):
        """Sets the taxonomy_id of this Germplasm.


        :param taxonomy_id: The taxonomy_id of this Germplasm.
        :type taxonomy_id: int
        """
        if taxonomy_id is None:
            raise ValueError("Invalid value for `taxonomy_id`, must not be `None`")  # noqa: E501

        self._taxonomy_id = taxonomy_id
