# coding: utf-8

"""
    Divseek Canada MVP application API

    Implements all the calls necessary for finding genomic markers for germplasm, but doesn't conform to BrAPI.  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: apiteam@swagger.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class DefaultApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_germplasm(self, **kwargs):  # noqa: E501
        """Returns all germplasm we have  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_germplasm(async=True)
        >>> result = thread.get()

        :param async bool
        :return: list[Germplasm]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_germplasm_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_germplasm_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_germplasm_with_http_info(self, **kwargs):  # noqa: E501
        """Returns all germplasm we have  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_germplasm_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: list[Germplasm]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_germplasm" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/germplasm/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Germplasm]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_germplasm_by_id(self, id, **kwargs):  # noqa: E501
        """Returns all germplasm we have  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_germplasm_by_id(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: Unique database ID for the germplasm (required)
        :return: Germplasm
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_germplasm_by_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_germplasm_by_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_germplasm_by_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Returns all germplasm we have  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_germplasm_by_id_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: Unique database ID for the germplasm (required)
        :return: Germplasm
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_germplasm_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_germplasm_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/germplasm/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Germplasm',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_germplasm_by_taxon(self, id, **kwargs):  # noqa: E501
        """Returns all germplasm we have by taxon  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_germplasm_by_taxon(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: Unique database ID for the taxon (required)
        :return: Germplasm
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_germplasm_by_taxon_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_germplasm_by_taxon_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_germplasm_by_taxon_with_http_info(self, id, **kwargs):  # noqa: E501
        """Returns all germplasm we have by taxon  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_germplasm_by_taxon_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: Unique database ID for the taxon (required)
        :return: Germplasm
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_germplasm_by_taxon" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_germplasm_by_taxon`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/germplasm/taxon/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Germplasm',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_locus_by_qtl(self, id, **kwargs):  # noqa: E501
        """Returns all phenotypes for a germplasm that we have  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_locus_by_qtl(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: Unique database ID for the QTL (required)
        :return: Locus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_locus_by_qtl_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_locus_by_qtl_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_locus_by_qtl_with_http_info(self, id, **kwargs):  # noqa: E501
        """Returns all phenotypes for a germplasm that we have  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_locus_by_qtl_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: Unique database ID for the QTL (required)
        :return: Locus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_locus_by_qtl" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_locus_by_qtl`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/locus/qtl/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Locus',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_locus_by_taxon(self, id, **kwargs):  # noqa: E501
        """Returns all phenotypes for a germplasm that we have  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_locus_by_taxon(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: Unique database ID for the taaon (required)
        :return: list[Locus]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_locus_by_taxon_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_locus_by_taxon_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_locus_by_taxon_with_http_info(self, id, **kwargs):  # noqa: E501
        """Returns all phenotypes for a germplasm that we have  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_locus_by_taxon_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: Unique database ID for the taaon (required)
        :return: list[Locus]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_locus_by_taxon" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_locus_by_taxon`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/locus/taxon/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Locus]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_qt_ls(self, **kwargs):  # noqa: E501
        """Returns all the QTLs (Quantitative Trait Loci) we have  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_qt_ls(async=True)
        >>> result = thread.get()

        :param async bool
        :return: list[QTL]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_qt_ls_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_qt_ls_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_qt_ls_with_http_info(self, **kwargs):  # noqa: E501
        """Returns all the QTLs (Quantitative Trait Loci) we have  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_qt_ls_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: list[QTL]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_qt_ls" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/qtl/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[QTL]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_qtl_by_germplasm_trait(self, germplasm_id, trait_id, **kwargs):  # noqa: E501
        """Returns all phenotypes for a germplasm that we have  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_qtl_by_germplasm_trait(germplasm_id, trait_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str germplasm_id: Unique database ID for the germplasm (required)
        :param str trait_id: Unique database ID for the trait in question (required)
        :return: list[QTL]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_qtl_by_germplasm_trait_with_http_info(germplasm_id, trait_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_qtl_by_germplasm_trait_with_http_info(germplasm_id, trait_id, **kwargs)  # noqa: E501
            return data

    def get_qtl_by_germplasm_trait_with_http_info(self, germplasm_id, trait_id, **kwargs):  # noqa: E501
        """Returns all phenotypes for a germplasm that we have  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_qtl_by_germplasm_trait_with_http_info(germplasm_id, trait_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str germplasm_id: Unique database ID for the germplasm (required)
        :param str trait_id: Unique database ID for the trait in question (required)
        :return: list[QTL]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['germplasm_id', 'trait_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_qtl_by_germplasm_trait" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'germplasm_id' is set
        if ('germplasm_id' not in params or
                params['germplasm_id'] is None):
            raise ValueError("Missing the required parameter `germplasm_id` when calling `get_qtl_by_germplasm_trait`")  # noqa: E501
        # verify the required parameter 'trait_id' is set
        if ('trait_id' not in params or
                params['trait_id'] is None):
            raise ValueError("Missing the required parameter `trait_id` when calling `get_qtl_by_germplasm_trait`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'germplasm_id' in params:
            path_params['germplasmId'] = params['germplasm_id']  # noqa: E501
        if 'trait_id' in params:
            path_params['traitId'] = params['trait_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/qtl/taxon/{taxonId}/trait/{traitId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[QTL]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_taxonomy(self, **kwargs):  # noqa: E501
        """Returns all germplasm we have  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_taxonomy(async=True)
        >>> result = thread.get()

        :param async bool
        :return: list[Taxonomy]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_taxonomy_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_taxonomy_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_taxonomy_with_http_info(self, **kwargs):  # noqa: E501
        """Returns all germplasm we have  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_taxonomy_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: list[Taxonomy]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_taxonomy" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/taxon/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Taxonomy]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_taxonomy_by_id(self, id, **kwargs):  # noqa: E501
        """Returns all germplasm we have  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_taxonomy_by_id(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: Unique database ID for the taxonomy (required)
        :return: Taxonomy
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_taxonomy_by_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_taxonomy_by_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_taxonomy_by_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Returns all germplasm we have  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_taxonomy_by_id_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: Unique database ID for the taxonomy (required)
        :return: Taxonomy
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_taxonomy_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_taxonomy_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/taxon/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Taxonomy',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_traits(self, **kwargs):  # noqa: E501
        """Returns all phenotypes we have  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_traits(async=True)
        >>> result = thread.get()

        :param async bool
        :return: list[Phenotype]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_traits_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_traits_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_traits_with_http_info(self, **kwargs):  # noqa: E501
        """Returns all phenotypes we have  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_traits_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: list[Phenotype]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_traits" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/trait/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Phenotype]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_traits_by_germplasm(self, germplasm_id, **kwargs):  # noqa: E501
        """Returns all phenotypes for a germplasm that we have  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_traits_by_germplasm(germplasm_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str germplasm_id: Unique database ID for the germplasm (required)
        :return: list[Phenotype]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_traits_by_germplasm_with_http_info(germplasm_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_traits_by_germplasm_with_http_info(germplasm_id, **kwargs)  # noqa: E501
            return data

    def get_traits_by_germplasm_with_http_info(self, germplasm_id, **kwargs):  # noqa: E501
        """Returns all phenotypes for a germplasm that we have  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_traits_by_germplasm_with_http_info(germplasm_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str germplasm_id: Unique database ID for the germplasm (required)
        :return: list[Phenotype]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['germplasm_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_traits_by_germplasm" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'germplasm_id' is set
        if ('germplasm_id' not in params or
                params['germplasm_id'] is None):
            raise ValueError("Missing the required parameter `germplasm_id` when calling `get_traits_by_germplasm`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'germplasm_id' in params:
            path_params['germplasmId'] = params['germplasm_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/trait/germplasm/{germplasmId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Phenotype]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
